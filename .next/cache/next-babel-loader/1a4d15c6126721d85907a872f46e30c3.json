{"ast":null,"code":"import commerce from '../../lib/commerce';\nimport { RETRIEVE_CART_SUCCESS, RETRIEVE_CART_ERROR, ADD_TO_CART_SUCCESS, ADD_TO_CART_ERROR, UPDATE_CART_ITEM_SUCCESS, UPDATE_CART_ITEM_ERROR, REMOVE_FROM_CART_SUCCESS, REMOVE_FROM_CART_ERROR } from './actionTypes'; // Create all Cart actions, define the callbacks to the reducers\n\n/**\r\n * Set cart and update Redux store\r\n */\n\nexport const retrieveCartSuccess = cart => {\n  return {\n    type: RETRIEVE_CART_SUCCESS,\n    payload: cart\n  };\n};\n/**\r\n * Handle error on retrieve cart fail\r\n */\n\nexport const retrieveCartError = error => {\n  console.log('Error retrieving cart', error);\n  return {\n    type: RETRIEVE_CART_ERROR\n  };\n};\n/**\r\n * Async retrieve cart from API\r\n */\n\nexport const retrieveCart = () => dispatch => {\n  return commerce.cart.retrieve().then(cart => dispatch(retrieveCartSuccess(cart))).catch(error => dispatch(retrieveCartError(error)));\n};\n/**\r\n * Handle add to cart success and update store\r\n */\n\nexport const addToCartSuccess = product => {\n  return {\n    type: ADD_TO_CART_SUCCESS,\n    payload: product\n  };\n};\n/**\r\n * Handle error on adding product to cart\r\n */\n\nexport const addToCartError = error => {\n  console.log('Error adding product to cart', error);\n  return {\n    type: ADD_TO_CART_ERROR\n  };\n};\n/**\r\n * Async add product to cart\r\n */\n\nexport const addToCart = (productId, quantity, selectedOption) => dispatch => commerce.cart.add(productId, quantity, selectedOption).then(product => dispatch(addToCartSuccess(product))).catch(error => dispatch(addToCartError(error)));\n/**\r\n * Handle update cart item success and update store\r\n */\n\nexport const updateCartItemSuccess = item => {\n  return {\n    type: UPDATE_CART_ITEM_SUCCESS,\n    payload: item\n  };\n};\n/**\r\n * Handle error on updating cart item\r\n */\n\nexport const updateCartItemError = error => {\n  console.log('Error updating cart item', error);\n  return {\n    type: UPDATE_CART_ITEM_ERROR\n  };\n};\n/**\r\n * Async update cart item\r\n */\n\nexport const updateCartItem = (lineItemId, quantity) => dispatch => commerce.cart.update(lineItemId, {\n  quantity\n}).then(item => dispatch(updateCartItemSuccess(item))).catch(error => dispatch(updateCartItemError(error)));\n/**\r\n * Handle remove cart item success and update store\r\n */\n\nexport const removeFromCartSuccess = resp => {\n  return {\n    type: REMOVE_FROM_CART_SUCCESS,\n    payload: resp\n  };\n};\n/**\r\n * Handle remove cart item error\r\n */\n\nexport const removeFromCartError = error => {\n  console.log('Error removing cart item', error);\n  return {\n    type: REMOVE_FROM_CART_ERROR\n  };\n};\n/**\r\n * Async remove cart item\r\n */\n\nexport const removeFromCart = lineItemId => dispatch => commerce.cart.remove(lineItemId).then(resp => dispatch(removeFromCartSuccess(resp))).catch(error => dispatch(removeFromCartError(error)));","map":{"version":3,"sources":["C:/Users/sandi/chec-store/store/actions/cartActions.js"],"names":["commerce","RETRIEVE_CART_SUCCESS","RETRIEVE_CART_ERROR","ADD_TO_CART_SUCCESS","ADD_TO_CART_ERROR","UPDATE_CART_ITEM_SUCCESS","UPDATE_CART_ITEM_ERROR","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_ERROR","retrieveCartSuccess","cart","type","payload","retrieveCartError","error","console","log","retrieveCart","dispatch","retrieve","then","catch","addToCartSuccess","product","addToCartError","addToCart","productId","quantity","selectedOption","add","updateCartItemSuccess","item","updateCartItemError","updateCartItem","lineItemId","update","removeFromCartSuccess","resp","removeFromCartError","removeFromCart","remove"],"mappings":"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","sourcesContent":["import commerce from '../../lib/commerce'\r\n\r\nimport {\r\n  RETRIEVE_CART_SUCCESS,\r\n  RETRIEVE_CART_ERROR,\r\n  ADD_TO_CART_SUCCESS,\r\n  ADD_TO_CART_ERROR,\r\n  UPDATE_CART_ITEM_SUCCESS,\r\n  UPDATE_CART_ITEM_ERROR,\r\n  REMOVE_FROM_CART_SUCCESS,\r\n  REMOVE_FROM_CART_ERROR\r\n} from './actionTypes';\r\n\r\n// Create all Cart actions, define the callbacks to the reducers\r\n\r\n/**\r\n * Set cart and update Redux store\r\n */\r\nexport const retrieveCartSuccess = (cart) => {\r\n  return {\r\n    type: RETRIEVE_CART_SUCCESS,\r\n    payload: cart\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error on retrieve cart fail\r\n */\r\nexport const retrieveCartError = (error) => {\r\n  console.log('Error retrieving cart', error)\r\n  return {\r\n    type: RETRIEVE_CART_ERROR,\r\n  }\r\n}\r\n\r\n/**\r\n * Async retrieve cart from API\r\n */\r\nexport const retrieveCart = () => (dispatch) => {\r\n  return commerce.cart.retrieve()\r\n    .then(cart => dispatch(retrieveCartSuccess(cart)))\r\n    .catch(error => dispatch(retrieveCartError(error)));\r\n}\r\n\r\n\r\n/**\r\n * Handle add to cart success and update store\r\n */\r\nexport const addToCartSuccess = (product) => {\r\n  return {\r\n    type: ADD_TO_CART_SUCCESS,\r\n    payload: product\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error on adding product to cart\r\n */\r\nexport const addToCartError = (error) => {\r\n  console.log('Error adding product to cart', error);\r\n  return {\r\n    type: ADD_TO_CART_ERROR,\r\n  }\r\n}\r\n\r\n/**\r\n * Async add product to cart\r\n */\r\nexport const addToCart = (productId, quantity, selectedOption) => (dispatch) => commerce.cart.add(productId, quantity, selectedOption)\r\n  .then(product => dispatch(addToCartSuccess(product)))\r\n  .catch(error => dispatch(addToCartError(error)));\r\n\r\n\r\n/**\r\n * Handle update cart item success and update store\r\n */\r\nexport const updateCartItemSuccess = (item) => {\r\n  return {\r\n    type: UPDATE_CART_ITEM_SUCCESS,\r\n    payload: item\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error on updating cart item\r\n */\r\nexport const updateCartItemError = (error) => {\r\n  console.log('Error updating cart item', error);\r\n  return {\r\n    type: UPDATE_CART_ITEM_ERROR\r\n  }\r\n}\r\n\r\n/**\r\n * Async update cart item\r\n */\r\nexport const updateCartItem = (lineItemId, quantity) => (dispatch) => commerce.cart.update(lineItemId, { quantity })\r\n  .then(item => dispatch(updateCartItemSuccess(item)))\r\n  .catch(error => dispatch(updateCartItemError(error)));\r\n\r\n/**\r\n * Handle remove cart item success and update store\r\n */\r\nexport const removeFromCartSuccess = (resp) => {\r\n  return {\r\n    type: REMOVE_FROM_CART_SUCCESS,\r\n    payload: resp\r\n  }\r\n}\r\n\r\n/**\r\n * Handle remove cart item error\r\n */\r\nexport const removeFromCartError = (error) => {\r\n  console.log('Error removing cart item', error)\r\n  return {\r\n    type: REMOVE_FROM_CART_ERROR\r\n  }\r\n}\r\n\r\n/**\r\n * Async remove cart item\r\n */\r\nexport const removeFromCart = (lineItemId) => (dispatch) => commerce.cart.remove(lineItemId)\r\n  .then(resp => dispatch(removeFromCartSuccess(resp)))\r\n  .catch(error => dispatch(removeFromCartError(error)));\r\n"]},"metadata":{},"sourceType":"module"}