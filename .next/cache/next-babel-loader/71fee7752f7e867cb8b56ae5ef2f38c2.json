{"ast":null,"code":"import commerce from '../../lib/commerce';\nimport { RETRIEVE_CART_SUCCESS, RETRIEVE_CART_ERROR, ADD_TO_CART_SUCCESS, ADD_TO_CART_ERROR, UPDATE_CART_ITEM_SUCCESS, UPDATE_CART_ITEM_ERROR, REMOVE_FROM_CART_SUCCESS, REMOVE_FROM_CART_ERROR } from './actionTypes'; // Create all Cart actions, define the callbacks to the reducers\n\n/**\r\n * Set cart and update Redux store\r\n */\n\nexport var retrieveCartSuccess = function retrieveCartSuccess(cart) {\n  return {\n    type: RETRIEVE_CART_SUCCESS,\n    payload: cart\n  };\n};\n/**\r\n * Handle error on retrieve cart fail\r\n */\n\nexport var retrieveCartError = function retrieveCartError(error) {\n  console.log('Error retrieving cart', error);\n  return {\n    type: RETRIEVE_CART_ERROR\n  };\n};\n/**\r\n * Async retrieve cart from API\r\n */\n\nexport var retrieveCart = function retrieveCart() {\n  return function (dispatch) {\n    return commerce.cart.retrieve().then(function (cart) {\n      return dispatch(retrieveCartSuccess(cart));\n    })[\"catch\"](function (error) {\n      return dispatch(retrieveCartError(error));\n    });\n  };\n};\n/**\r\n * Handle add to cart success and update store\r\n */\n\nexport var addToCartSuccess = function addToCartSuccess(product) {\n  return {\n    type: ADD_TO_CART_SUCCESS,\n    payload: product\n  };\n};\n/**\r\n * Handle error on adding product to cart\r\n */\n\nexport var addToCartError = function addToCartError(error) {\n  console.log('Error adding product to cart', error);\n  return {\n    type: ADD_TO_CART_ERROR\n  };\n};\n/**\r\n * Async add product to cart\r\n */\n\nexport var addToCart = function addToCart(productId, quantity, selectedOption) {\n  return function (dispatch) {\n    return commerce.cart.add(productId, quantity, selectedOption).then(function (product) {\n      return dispatch(addToCartSuccess(product));\n    })[\"catch\"](function (error) {\n      return dispatch(addToCartError(error));\n    });\n  };\n};\n/**\r\n * Handle update cart item success and update store\r\n */\n\nexport var updateCartItemSuccess = function updateCartItemSuccess(item) {\n  return {\n    type: UPDATE_CART_ITEM_SUCCESS,\n    payload: item\n  };\n};\n/**\r\n * Handle error on updating cart item\r\n */\n\nexport var updateCartItemError = function updateCartItemError(error) {\n  console.log('Error updating cart item', error);\n  return {\n    type: UPDATE_CART_ITEM_ERROR\n  };\n};\n/**\r\n * Async update cart item\r\n */\n\nexport var updateCartItem = function updateCartItem(lineItemId, quantity) {\n  return function (dispatch) {\n    return commerce.cart.update(lineItemId, {\n      quantity: quantity\n    }).then(function (item) {\n      return dispatch(updateCartItemSuccess(item));\n    })[\"catch\"](function (error) {\n      return dispatch(updateCartItemError(error));\n    });\n  };\n};\n/**\r\n * Handle remove cart item success and update store\r\n */\n\nexport var removeFromCartSuccess = function removeFromCartSuccess(resp) {\n  return {\n    type: REMOVE_FROM_CART_SUCCESS,\n    payload: resp\n  };\n};\n/**\r\n * Handle remove cart item error\r\n */\n\nexport var removeFromCartError = function removeFromCartError(error) {\n  console.log('Error removing cart item', error);\n  return {\n    type: REMOVE_FROM_CART_ERROR\n  };\n};\n/**\r\n * Async remove cart item\r\n */\n\nexport var removeFromCart = function removeFromCart(lineItemId) {\n  return function (dispatch) {\n    return commerce.cart.remove(lineItemId).then(function (resp) {\n      return dispatch(removeFromCartSuccess(resp));\n    })[\"catch\"](function (error) {\n      return dispatch(removeFromCartError(error));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/sandi/chec-store/store/actions/cartActions.js"],"names":["commerce","RETRIEVE_CART_SUCCESS","RETRIEVE_CART_ERROR","ADD_TO_CART_SUCCESS","ADD_TO_CART_ERROR","UPDATE_CART_ITEM_SUCCESS","UPDATE_CART_ITEM_ERROR","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_ERROR","retrieveCartSuccess","cart","type","payload","retrieveCartError","error","console","log","retrieveCart","dispatch","retrieve","then","addToCartSuccess","product","addToCartError","addToCart","productId","quantity","selectedOption","add","updateCartItemSuccess","item","updateCartItemError","updateCartItem","lineItemId","update","removeFromCartSuccess","resp","removeFromCartError","removeFromCart","remove"],"mappings":"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","sourcesContent":["import commerce from '../../lib/commerce'\r\n\r\nimport {\r\n  RETRIEVE_CART_SUCCESS,\r\n  RETRIEVE_CART_ERROR,\r\n  ADD_TO_CART_SUCCESS,\r\n  ADD_TO_CART_ERROR,\r\n  UPDATE_CART_ITEM_SUCCESS,\r\n  UPDATE_CART_ITEM_ERROR,\r\n  REMOVE_FROM_CART_SUCCESS,\r\n  REMOVE_FROM_CART_ERROR\r\n} from './actionTypes';\r\n\r\n// Create all Cart actions, define the callbacks to the reducers\r\n\r\n/**\r\n * Set cart and update Redux store\r\n */\r\nexport const retrieveCartSuccess = (cart) => {\r\n  return {\r\n    type: RETRIEVE_CART_SUCCESS,\r\n    payload: cart\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error on retrieve cart fail\r\n */\r\nexport const retrieveCartError = (error) => {\r\n  console.log('Error retrieving cart', error)\r\n  return {\r\n    type: RETRIEVE_CART_ERROR,\r\n  }\r\n}\r\n\r\n/**\r\n * Async retrieve cart from API\r\n */\r\nexport const retrieveCart = () => (dispatch) => {\r\n  return commerce.cart.retrieve()\r\n    .then(cart => dispatch(retrieveCartSuccess(cart)))\r\n    .catch(error => dispatch(retrieveCartError(error)));\r\n}\r\n\r\n\r\n/**\r\n * Handle add to cart success and update store\r\n */\r\nexport const addToCartSuccess = (product) => {\r\n  return {\r\n    type: ADD_TO_CART_SUCCESS,\r\n    payload: product\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error on adding product to cart\r\n */\r\nexport const addToCartError = (error) => {\r\n  console.log('Error adding product to cart', error);\r\n  return {\r\n    type: ADD_TO_CART_ERROR,\r\n  }\r\n}\r\n\r\n/**\r\n * Async add product to cart\r\n */\r\nexport const addToCart = (productId, quantity, selectedOption) => (dispatch) => commerce.cart.add(productId, quantity, selectedOption)\r\n  .then(product => dispatch(addToCartSuccess(product)))\r\n  .catch(error => dispatch(addToCartError(error)));\r\n\r\n\r\n/**\r\n * Handle update cart item success and update store\r\n */\r\nexport const updateCartItemSuccess = (item) => {\r\n  return {\r\n    type: UPDATE_CART_ITEM_SUCCESS,\r\n    payload: item\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error on updating cart item\r\n */\r\nexport const updateCartItemError = (error) => {\r\n  console.log('Error updating cart item', error);\r\n  return {\r\n    type: UPDATE_CART_ITEM_ERROR\r\n  }\r\n}\r\n\r\n/**\r\n * Async update cart item\r\n */\r\nexport const updateCartItem = (lineItemId, quantity) => (dispatch) => commerce.cart.update(lineItemId, { quantity })\r\n  .then(item => dispatch(updateCartItemSuccess(item)))\r\n  .catch(error => dispatch(updateCartItemError(error)));\r\n\r\n/**\r\n * Handle remove cart item success and update store\r\n */\r\nexport const removeFromCartSuccess = (resp) => {\r\n  return {\r\n    type: REMOVE_FROM_CART_SUCCESS,\r\n    payload: resp\r\n  }\r\n}\r\n\r\n/**\r\n * Handle remove cart item error\r\n */\r\nexport const removeFromCartError = (error) => {\r\n  console.log('Error removing cart item', error)\r\n  return {\r\n    type: REMOVE_FROM_CART_ERROR\r\n  }\r\n}\r\n\r\n/**\r\n * Async remove cart item\r\n */\r\nexport const removeFromCart = (lineItemId) => (dispatch) => commerce.cart.remove(lineItemId)\r\n  .then(resp => dispatch(removeFromCartSuccess(resp)))\r\n  .catch(error => dispatch(removeFromCartError(error)));\r\n"]},"metadata":{},"sourceType":"module"}